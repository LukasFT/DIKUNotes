
==================== FINAL INTERFACE ====================
2018-11-08 19:04:15.114020488 UTC

interface main:Main 8043
  interface hash: c9533e29047396d1110e634a384645b3
  ABI hash: 1442351ac3670884b465258ae76be731
  export-list hash: f63fb8e94958a17d23311fa8823ba7ba
  orphan hash: 3875e189208f563488ed63a478f31f05
  flag hash: 6c388d8577697c4d409ff2f2363bec63
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
  Main.parseFile
  Main.path
  Main.runTest
  Main.tests
module dependencies:
package dependencies: ansi-terminal-0.8.0.4 ansi-wl-pprint-0.6.8.2
                      appm-0.0.0 array-0.5.2.0 async-2.2.1 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 call-stack-0.1.0 clock-0.7.2 colour-2.3.4
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 mtl-2.2.2
                      optparse-applicative-0.14.2.0 parsec-3.1.13.0 process-1.6.3.0
                      stm-2.4.5.0 tagged-0.8.5 tasty-1.1.0.3 tasty-hunit-0.10.0.1
                      text-1.2.3.0 transformers-0.5.5.0 unbounded-delays-0.1.1.0
                      unix-2.7.2.2 wcwidth-0.0.2
orphans: appm-0.0.0:Utils stm-2.4.5.0:Control.Monad.STM
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         colour-2.3.4:Data.Colour base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         clock-0.7.2:System.Clock containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         tagged-0.8.5:Data.Tagged tasty-1.1.0.3:Test.Tasty.Core
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
import  -/  appm-0.0.0:Defs c8776ec9639bd8739e47c30a97e82c26
import  -/  appm-0.0.0:Parser 82ea54324bfd755d2541153c042d63dc
import  -/  appm-0.0.0:ParserImpl 46bf9931bc64e18a78df069078657eaa
import  -/  appm-0.0.0:Solver 4cbdd0c43f7bec40dbba8dab427d30c7
import  -/  appm-0.0.0:SolverImpl 92ee2e95329010180c91566997774782
import  -/  appm-0.0.0:Utils 64658fcf41d296a2e90c8c567eb8db7b
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.IO 1d5542cc02075c5e948018bfacea89c1
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO 1c239be44126f7b1ba512ea61300f4dc
import  -/  base-4.11.1.0:Text.Read 6c02630607b565ffcb34e8127673989b
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  tasty-1.1.0.3:Test.Tasty 3aee3445f1ab857a6b68dde2f15a99f9
import  -/  tasty-1.1.0.3:Test.Tasty.Core c12f1e13f1a16d28e3df29c23937c462
import  -/  tasty-hunit-0.10.0.1:Test.Tasty.HUnit 6c91261a2c27cb83a268b6d3017c9a06
import  -/  tasty-hunit-0.10.0.1:Test.Tasty.HUnit.Orig eaa0b10673ab6d8aa2d32b170f906247
b362ab7f48f52fe88d8cb87dd0cf55b5
  $s$fEq(,) :: GHC.Classes.Eq (Defs.PName, Defs.Version)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Defs.PName, Defs.Version)
                  (GHC.Classes.$fEq(,)_$c==
                     @ Defs.PName
                     @ Defs.Version
                     Defs.$fEqPName
                     Defs.$fEqVersion)
                  Main.$s$fEq(,)_$s$fEq(,)_$c/= -}
abc46ece907b20570b5e3dd0b2764187
  $s$fEq(,)_$s$fEq(,)_$c/= ::
    (Defs.PName, Defs.Version)
    -> (Defs.PName, Defs.Version) -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: (Defs.PName, Defs.Version))
                   (y :: (Defs.PName, Defs.Version)) ->
                 case x of wild { (,) a1 a2 ->
                 case y of wild1 { (,) b1 b2 ->
                 case GHC.Base.eqString
                        a1 `cast` (Defs.N:PName[0])
                        b1 `cast` (Defs.N:PName[0]) of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ Defs.VNum
                             Defs.$fEqVNum
                             a2 `cast` (Defs.N:Version[0])
                             b2 `cast` (Defs.N:Version[0]) of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
9ee870153f0e732d6b632ad9e267c3b8
  $s$fShow(,)_$s$fShow(,,) ::
    GHC.Show.Show (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Bool, Defs.Version, Defs.Version)
                  (GHC.Show.$fShow(,,)_$cshowsPrec
                     @ GHC.Types.Bool
                     @ Defs.Version
                     @ Defs.Version
                     GHC.Show.$fShowBool
                     Defs.$fShowVersion
                     Defs.$fShowVersion)
                  (\ (x :: (GHC.Types.Bool, Defs.Version, Defs.Version)) ->
                   GHC.Show.$fShow(,,)_$cshowsPrec
                     @ GHC.Types.Bool
                     @ Defs.Version
                     @ Defs.Version
                     GHC.Show.$fShowBool
                     Defs.$fShowVersion
                     Defs.$fShowVersion
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(GHC.Types.Bool, Defs.Version, Defs.Version)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (GHC.Types.Bool, Defs.Version, Defs.Version)
                     (GHC.Show.$fShow(,,)_$cshowsPrec
                        @ GHC.Types.Bool
                        @ Defs.Version
                        @ Defs.Version
                        GHC.Show.$fShowBool
                        Defs.$fShowVersion
                        Defs.$fShowVersion
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
08742ff1e9f9e2272dff9908ea788983
  $s$fShowEither ::
    GHC.Show.Show (Data.Either.Either [GHC.Types.Char] Defs.Database)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either [GHC.Types.Char] Defs.Database)
                  (Data.Either.$fShowEither_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ Defs.Database
                     GHC.Show.$fShow[]_$s$fShow[]1
                     Defs.$fShowDatabase)
                  (\ (x :: Data.Either.Either [GHC.Types.Char] Defs.Database) ->
                   case x of wild {
                     Data.Either.Left b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n Data.Either.$fShowEither4)
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)3
                             (GHC.Show.showLitString
                                b1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Types.[] @ GHC.Types.Char))))
                     Data.Either.Right b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n Data.Either.$fShowEither2)
                          (Defs.$fShowDatabase_$cshowsPrec
                             Data.Either.$fReadEither6
                             b1
                             (GHC.Types.[] @ GHC.Types.Char)) })
                  (\ (ls :: [Data.Either.Either [GHC.Types.Char] Defs.Database])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Data.Either.Either [GHC.Types.Char] Defs.Database)
                     (Data.Either.$fShowEither_$cshowsPrec
                        @ [GHC.Types.Char]
                        @ Defs.Database
                        GHC.Show.$fShow[]_$s$fShow[]1
                        Defs.$fShowDatabase
                        Data.Either.$fShowEither1)
                     ls
                     s) -}
aec1f289db72af1393c94b7f898bb612
  $s$fShowEither_$cshowList ::
    [Data.Either.Either [GHC.Types.Char] Defs.Database]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Data.Either.Either [GHC.Types.Char] Defs.Database])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Either.Either [GHC.Types.Char] Defs.Database)
                   (Data.Either.$fShowEither_$cshowsPrec
                      @ [GHC.Types.Char]
                      @ Defs.Database
                      GHC.Show.$fShow[]_$s$fShow[]1
                      Defs.$fShowDatabase
                      Data.Either.$fShowEither1)
                   ls
                   s) -}
6f443b8d1e59319ce3041e78cf53d4a2
  $s$fShowEither_$cshowsPrec ::
    GHC.Types.Int
    -> Data.Either.Either [GHC.Types.Char] Defs.Database
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w2 :: GHC.Types.Int)
                   (w3 :: Data.Either.Either [GHC.Types.Char] Defs.Database) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Data.Either.$w$cshowsPrec
                   @ [GHC.Types.Char]
                   @ Defs.Database
                   GHC.Show.$fShow[]_$s$fShow[]1
                   Defs.$fShowDatabase
                   ww1
                   w3 }) -}
c3adece9bd2728e742a187946be692bf
  $s$fShowMaybe ::
    GHC.Show.Show (GHC.Base.Maybe [(Defs.PName, Defs.Version)])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe [(Defs.PName, Defs.Version)])
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ [(Defs.PName, Defs.Version)]
                     Main.$s$fShowMaybe_$s$fShow[])
                  (\ (x :: GHC.Base.Maybe [(Defs.PName, Defs.Version)]) ->
                   case x of wild {
                     GHC.Base.Nothing -> GHC.Show.$fShowMaybe4
                     GHC.Base.Just b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n GHC.Show.$fShowMaybe1)
                          (case b1 of wild1 {
                             []
                             -> GHC.CString.unpackAppendCString#
                                  GHC.Show.showList__4
                                  (GHC.Types.[] @ GHC.Types.Char)
                             : x1 xs
                             -> GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showList__3
                                  (GHC.Show.$fShow(,)_$cshowsPrec
                                     @ Defs.PName
                                     @ Defs.Version
                                     Defs.$fShowPName
                                     Defs.$fShowVersion
                                     GHC.Show.$fShow(,)1
                                     x1
                                     (let {
                                        lvl97 :: [GHC.Types.Char]
                                        = GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.showList__2
                                            (GHC.Types.[] @ GHC.Types.Char)
                                      } in
                                      letrec {
                                        showl2 :: [(Defs.PName, Defs.Version)] -> GHC.Base.String
                                          {- Arity: 1, Strictness: <S,1*U> -}
                                        = \ (ds2 :: [(Defs.PName, Defs.Version)]) ->
                                          case ds2 of wild2 {
                                            [] -> lvl97
                                            : y ys
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.showList__1
                                                 (GHC.Show.$fShow(,)_$cshowsPrec
                                                    @ Defs.PName
                                                    @ Defs.Version
                                                    Defs.$fShowPName
                                                    Defs.$fShowVersion
                                                    GHC.Show.$fShow(,)1
                                                    y
                                                    (showl2 ys)) }
                                      } in
                                      showl2 xs)) }) })
                  (\ (ls :: [GHC.Base.Maybe [(Defs.PName, Defs.Version)]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (GHC.Base.Maybe [(Defs.PName, Defs.Version)])
                     (GHC.Show.$fShowMaybe_$cshowsPrec
                        @ [(Defs.PName, Defs.Version)]
                        Main.$s$fShowMaybe_$s$fShow[]
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
9e7927d7e2808edadff36fe77f3ffae2
  $s$fShowMaybe1 ::
    GHC.Show.Show (GHC.Base.Maybe [(Defs.PName, Defs.PConstr)])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe [(Defs.PName, Defs.PConstr)])
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ [(Defs.PName, Defs.PConstr)]
                     Main.$s$fShowMaybe_$s$fShow[]1)
                  (\ (x :: GHC.Base.Maybe [(Defs.PName, Defs.PConstr)]) ->
                   case x of wild {
                     GHC.Base.Nothing -> GHC.Show.$fShowMaybe4
                     GHC.Base.Just b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n GHC.Show.$fShowMaybe1)
                          (case b1 of wild1 {
                             []
                             -> GHC.CString.unpackAppendCString#
                                  GHC.Show.showList__4
                                  (GHC.Types.[] @ GHC.Types.Char)
                             : x1 xs
                             -> GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showList__3
                                  (GHC.Show.$fShow(,)_$cshowsPrec
                                     @ Defs.PName
                                     @ (GHC.Types.Bool, Defs.Version, Defs.Version)
                                     Defs.$fShowPName
                                     Main.$s$fShow(,)_$s$fShow(,,)
                                     GHC.Show.$fShow(,)1
                                     x1
                                     (let {
                                        lvl97 :: [GHC.Types.Char]
                                        = GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.showList__2
                                            (GHC.Types.[] @ GHC.Types.Char)
                                      } in
                                      letrec {
                                        showl2 :: [(Defs.PName,
                                                    (GHC.Types.Bool, Defs.Version, Defs.Version))]
                                                  -> GHC.Base.String
                                          {- Arity: 1, Strictness: <S,1*U> -}
                                        = \ (ds2 :: [(Defs.PName,
                                                      (GHC.Types.Bool, Defs.Version,
                                                       Defs.Version))]) ->
                                          case ds2 of wild2 {
                                            [] -> lvl97
                                            : y ys
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.showList__1
                                                 (GHC.Show.$fShow(,)_$cshowsPrec
                                                    @ Defs.PName
                                                    @ (GHC.Types.Bool, Defs.Version, Defs.Version)
                                                    Defs.$fShowPName
                                                    Main.$s$fShow(,)_$s$fShow(,,)
                                                    GHC.Show.$fShow(,)1
                                                    y
                                                    (showl2 ys)) }
                                      } in
                                      showl2 xs)) }) })
                  (\ (ls :: [GHC.Base.Maybe [(Defs.PName, Defs.PConstr)]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (GHC.Base.Maybe [(Defs.PName, Defs.PConstr)])
                     (GHC.Show.$fShowMaybe_$cshowsPrec
                        @ [(Defs.PName, Defs.PConstr)]
                        Main.$s$fShowMaybe_$s$fShow[]1
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
760ef02f2674fa8f07e88406de42c849
  $s$fShowMaybe_$cshowList1 ::
    [GHC.Base.Maybe [(Defs.PName, Defs.PConstr)]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [GHC.Base.Maybe [(Defs.PName, Defs.PConstr)]])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe [(Defs.PName, Defs.PConstr)])
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ [(Defs.PName, Defs.PConstr)]
                      Main.$s$fShowMaybe_$s$fShow[]1
                      GHC.Show.$fShow(,)1)
                   ls
                   s) -}
c3e20101bfbfa08d62cbc059575d4056
  $s$fShowMaybe_$s$fShow[] ::
    GHC.Show.Show [(Defs.PName, Defs.Version)]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [(Defs.PName, Defs.Version)]
                  (\ (ds :: GHC.Types.Int)
                     (ls :: [(Defs.PName, Defs.Version)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Defs.PName, Defs.Version)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ Defs.PName
                        @ Defs.Version
                        Defs.$fShowPName
                        Defs.$fShowVersion
                        GHC.Show.$fShow(,)1)
                     ls
                     s)
                  (\ (x :: [(Defs.PName, Defs.Version)]) ->
                   GHC.Show.showList__
                     @ (Defs.PName, Defs.Version)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ Defs.PName
                        @ Defs.Version
                        Defs.$fShowPName
                        Defs.$fShowVersion
                        GHC.Show.$fShow(,)1)
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[(Defs.PName, Defs.Version)]]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [(Defs.PName, Defs.Version)]
                     (\ (ls1 :: [(Defs.PName, Defs.Version)])
                        (s1 :: GHC.Base.String)[OneShot] ->
                      GHC.Show.showList__
                        @ (Defs.PName, Defs.Version)
                        (GHC.Show.$fShow(,)_$cshowsPrec
                           @ Defs.PName
                           @ Defs.Version
                           Defs.$fShowPName
                           Defs.$fShowVersion
                           GHC.Show.$fShow(,)1)
                        ls1
                        s1)
                     ls
                     s) -}
06061a350e246b539d6f298e90273f2b
  $s$fShowMaybe_$s$fShow[]1 ::
    GHC.Show.Show [(Defs.PName, Defs.PConstr)]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [(Defs.PName, Defs.PConstr)]
                  (\ (ds :: GHC.Types.Int)
                     (ls :: [(Defs.PName,
                              (GHC.Types.Bool, Defs.Version, Defs.Version))])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ Defs.PName
                        @ (GHC.Types.Bool, Defs.Version, Defs.Version)
                        Defs.$fShowPName
                        Main.$s$fShow(,)_$s$fShow(,,)
                        GHC.Show.$fShow(,)1)
                     ls
                     s)
                  (\ (x :: [(Defs.PName, Defs.PConstr)]) ->
                   GHC.Show.showList__
                     @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ Defs.PName
                        @ (GHC.Types.Bool, Defs.Version, Defs.Version)
                        Defs.$fShowPName
                        Main.$s$fShow(,)_$s$fShow(,,)
                        GHC.Show.$fShow(,)1)
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[(Defs.PName, Defs.PConstr)]]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [(Defs.PName, Defs.PConstr)]
                     (\ (ls1 :: [(Defs.PName,
                                  (GHC.Types.Bool, Defs.Version, Defs.Version))])
                        (s1 :: GHC.Base.String)[OneShot] ->
                      GHC.Show.showList__
                        @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                        (GHC.Show.$fShow(,)_$cshowsPrec
                           @ Defs.PName
                           @ (GHC.Types.Bool, Defs.Version, Defs.Version)
                           Defs.$fShowPName
                           Main.$s$fShow(,)_$s$fShow(,,)
                           GHC.Show.$fShow(,)1)
                        ls1
                        s1)
                     ls
                     s) -}
e8d768b693bd3312bef3da83fdc0d222
  $s$fShow[]_$cshow1 ::
    [(Defs.PName, Defs.PConstr)] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [(Defs.PName, Defs.PConstr)]) ->
                 GHC.Show.showList__
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   (GHC.Show.$fShow(,)_$cshowsPrec
                      @ Defs.PName
                      @ (GHC.Types.Bool, Defs.Version, Defs.Version)
                      Defs.$fShowPName
                      Main.$s$fShow(,)_$s$fShow(,,)
                      GHC.Show.$fShow(,)1)
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
55486237d2f4eec77115883c932950c4
  $s$fShow[]_$cshowList1 ::
    [[(Defs.PName, Defs.PConstr)]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [[(Defs.PName, Defs.PConstr)]]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ [(Defs.PName, Defs.PConstr)]
                   (\ (ls1 :: [(Defs.PName,
                                (GHC.Types.Bool, Defs.Version, Defs.Version))])
                      (s1 :: GHC.Base.String)[OneShot] ->
                    GHC.Show.showList__
                      @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                      (GHC.Show.$fShow(,)_$cshowsPrec
                         @ Defs.PName
                         @ (GHC.Types.Bool, Defs.Version, Defs.Version)
                         Defs.$fShowPName
                         Main.$s$fShow(,)_$s$fShow(,,)
                         GHC.Show.$fShow(,)1)
                      ls1
                      s1)
                   ls
                   s) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
883e456909d76af465f9c9666aec2ef8
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
7ea026b67d9427a06065110fd141b3cb
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Test.Tasty.CmdLine.defaultMainWithIngredients1
                   Test.Tasty.defaultIngredients
                   Main.tests) -}
b80dcb9a1c8dacddb0ce2b10a7a6862e
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
e5f27e88ed587ab3de48bae4fd0eaf55
  parseFile ::
    GHC.IO.FilePath
    -> GHC.Types.IO (Data.Either.Either Defs.ErrMsg Defs.Database)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.parseFile1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either Defs.ErrMsg Defs.Database>_R)) -}
2c9a67b03f2becff5d9271d3f6b61195
  parseFile1 ::
    GHC.IO.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either Defs.ErrMsg Defs.Database #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (path2 :: GHC.IO.FilePath)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        path2
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds { (#,#) ipv2 ipv3 ->
                 (# ipv2, ParserImpl.parseDatabase ipv3 #) } }) -}
f4b6f8aec318c381e7f9396ab09466d5
  path :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.path1) -}
5092b274aa27dce80efd7e5b88480df3
  path1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("tests/BB/testfiles/"#) -}
32056947bce0f8fdca69dc5175cfc2ac
  runTest :: [GHC.Types.Char] -> [GHC.Types.Char] -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,1*U><L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests161
                  `cast`
                (<[GHC.Types.Char]>_R
                 ->_R <[GHC.Types.Char]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
ebce65c19fd4b59921ec6434374ac2f9
  tests :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup Main.tests366 Main.tests1) -}
6022fd2fe815555a0a909f755ff78ce4
  tests1 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests245
                   Main.tests2) -}
2532b6541e05868b8d0ee9a0063b81d3
  tests10 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests11
                   (GHC.Types.[] @ Test.Tasty.Core.TestTree)) -}
6ac5aea8681a5caaa1bee568aca7a248
  tests100 :: Text.ParserCombinators.ReadP.P Defs.Database
  {- Unfolding: (GHC.Read.$fRead()6
                   @ Defs.Database
                   Defs.$fReadDatabase2
                     `cast`
                   ((<Text.ParserCombinators.ReadPrec.Prec>_R
                     ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                   <Defs.Database>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                  <Defs.Database>_R))
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ Defs.Database
                   (Text.Read.readEither7 @ Defs.Database)) -}
6c8f0640f523631383b2d1c23324f72b
  tests101 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Main.path
                   Main.tests102) -}
8bebe563f278a8c76e8ac3e8749c3f78
  tests102 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests103) -}
2303783ed2b140bb5fdb8a340eae36d1
  tests103 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test12e"#) -}
50c5939a4356015b9babe995d3bb2030
  tests104 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests105) -}
d99819f4e6ca154996dd748352cf6aa7
  tests105 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("large case1"#) -}
3e5e6be8d925ee53473350da51bd2d1c
  tests106 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.tests117
                   Main.tests107
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
55786f7abc193829b5058c6819a14fda
  tests107 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests114
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds { (#,#) ipv2 ipv3 ->
                 case Text.Read.readEither8
                        @ Defs.Database
                        (Text.ParserCombinators.ReadP.run
                           @ Defs.Database
                           Main.tests100
                           ipv3) of wild {
                   []
                   -> case Main.tests99
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   : x ds2
                   -> case ds2 of wild1 {
                        []
                        -> let {
                             $j :: Defs.Database
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                               <join 1> {- Arity: 1, Strictness: <S,U> -}
                             = \ (ndb :: Defs.Database)[OneShot] ->
                               case SolverImpl.install
                                      ndb
                                      Main.tests96 `cast` (Sym (Defs.N:PName[0])) of wild2 {
                                 GHC.Base.Nothing
                                 -> case Main.tests113
                                           (GHC.Base.Nothing @ [(Defs.PName, Defs.Version)])
                                           ipv2
                                    ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                              [GHC.Types.Char] #)
                                    of {}
                                 GHC.Base.Just a1
                                 -> case GHC.Classes.$fEq[]_$c==
                                           @ (Defs.PName, Defs.Version)
                                           Main.$s$fEq(,)
                                           a1
                                           Main.tests108 of wild3 {
                                      GHC.Types.False
                                      -> case Main.tests113 wild2 ipv2
                                         ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                   [GHC.Types.Char] #)
                                         of {}
                                      GHC.Types.True
                                      -> (# ipv2, GHC.Types.[] @ GHC.Types.Char #) } }
                           } in
                           case x `cast` (Defs.N:Database[0]) of wild2 {
                             []
                             -> $j (GHC.Types.[] @ Defs.Pkg) `cast` (Sym (Defs.N:Database[0]))
                             : ipv4 ipv5
                             -> case SolverImpl.isConsistentDB
                                       (Data.OldList.sortBy @ Defs.Pkg SolverImpl.pkgCompare wild2)
                                         `cast`
                                       (Sym (Defs.N:Database[0])) of wild3 {
                                  Data.Either.Left ipv6
                                  -> case (GHC.Magic.noinline
                                             @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                                             GHC.IO.failIO1
                                               `cast`
                                             (forall (a :: <*>_N).
                                              <GHC.Base.String>_R
                                              ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                                             @ ()
                                             Main.tests55)
                                            `cast`
                                          (GHC.Types.N:IO[0] <()>_R)
                                            ipv2 of ds3 { (#,#) ipv7 ipv8 ->
                                     (# ipv7, GHC.Types.[] @ GHC.Types.Char #) }
                                  Data.Either.Right ndb -> $j ndb } }
                        : ipv4 ipv5
                        -> case Main.tests54
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {} } } } }) -}
10a6add41063833d76a435799620acb0
  tests108 :: [(Defs.PName, Defs.Version)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, Defs.Version)
                   Main.tests81
                   Main.tests109) -}
ac2854cd50697a3f2e9a33c45b53394d
  tests109 :: [(Defs.PName, Defs.Version)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, Defs.Version)
                   Main.tests111
                   Main.tests110) -}
a867ce4857d6c54bbac0c35356616995
  tests11 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.tests19
                   Main.tests12
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
ebae9c7692fe01afadda65afafa87a13
  tests110 :: [(Defs.PName, Defs.Version)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, Defs.Version)
                   Main.tests93
                   (GHC.Types.[] @ (Defs.PName, Defs.Version))) -}
5b5f276605456b38074bf0f2b5e2a2d9
  tests111 :: (Defs.PName, Defs.Version)
  {- Strictness: m,
     Unfolding: ((Main.tests79 `cast` (Sym (Defs.N:PName[0])),
                  Main.tests112 `cast` (Sym (Defs.N:Version[0])))) -}
756ba6e9965ad1477b8724145c92ba4c
  tests112 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.: @ Defs.VNum Main.tests87 Main.tests29) -}
561c28247b756f4134ccfcc3cfb9c97a
  tests113 ::
    GHC.Base.Maybe Defs.Sol
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <B,U><B,U>x -}
ebfe867115c39218ec805d98134dde20
  tests114 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Main.path
                   Main.tests115) -}
b38ae99f56a094252515260dd762d8a5
  tests115 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests116) -}
34dac90cf2f7b13196922ee2d6f05b8b
  tests116 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test2e"#) -}
470ba25ef55863eef0b07bb9c15fb2e2
  tests117 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests118) -}
150d17c37001e714fc3c0551be4c77d8
  tests118 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("intro2"#) -}
d833ee62332712a08e77ac0acf0c128a
  tests119 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.tests129
                   Main.tests120
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
0519bb4a2f07658e092be39bd745b890
  tests12 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests16
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds { (#,#) ipv2 ipv3 ->
                 case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Char
                         @ ()
                         @ Defs.Database
                         (ParserImpl.$s$fStream[]mtok @ GHC.Types.Char)
                         ParserImpl.databaseParser1
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <[GHC.Types.Char]>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <Defs.Database>_R))
                         GHC.Tuple.()
                         (GHC.Types.[] @ GHC.Types.Char)
                         ipv3)
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError Defs.Database>_R) of wild {
                   Data.Either.Left err
                   -> case (GHC.Magic.noinline
                              @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                              GHC.IO.failIO1
                                `cast`
                              (forall (a :: <*>_N).
                               <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                              @ ()
                              (GHC.Types.[] @ GHC.Types.Char))
                             `cast`
                           (GHC.Types.N:IO[0] <()>_R)
                             ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                      (# ipv4, GHC.Types.[] @ GHC.Types.Char #) }
                   Data.Either.Right db
                   -> case db `cast` (Defs.N:Database[0]) of wild1 {
                        []
                        -> case SolverImpl.install
                                  (GHC.Types.[] @ Defs.Pkg) `cast` (Sym (Defs.N:Database[0]))
                                  Main.tests14 `cast` (Sym (Defs.N:PName[0])) of wild2 {
                             GHC.Base.Nothing -> (# ipv2, GHC.Types.[] @ GHC.Types.Char #)
                             GHC.Base.Just a1
                             -> case Main.tests13 wild2 ipv2
                                ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                                of {} }
                        : ipv4 ipv5
                        -> case SolverImpl.isConsistentDB
                                  (Data.OldList.sortBy @ Defs.Pkg SolverImpl.pkgCompare wild1)
                                    `cast`
                                  (Sym (Defs.N:Database[0])) of wild2 {
                             Data.Either.Left ipv6
                             -> case (GHC.Magic.noinline
                                        @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                                        GHC.IO.failIO1
                                          `cast`
                                        (forall (a :: <*>_N).
                                         <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                                        @ ()
                                        (GHC.Types.[] @ GHC.Types.Char))
                                       `cast`
                                     (GHC.Types.N:IO[0] <()>_R)
                                       ipv2 of ds2 { (#,#) ipv7 ipv8 ->
                                (# ipv7, GHC.Types.[] @ GHC.Types.Char #) }
                             Data.Either.Right ndb
                             -> case SolverImpl.install
                                       ndb
                                       Main.tests14 `cast` (Sym (Defs.N:PName[0])) of wild3 {
                                  GHC.Base.Nothing -> (# ipv2, GHC.Types.[] @ GHC.Types.Char #)
                                  GHC.Base.Just a1
                                  -> case Main.tests13 wild3 ipv2
                                     ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               [GHC.Types.Char] #)
                                     of {} } } } } } }) -}
df7a4c65a91c35b28b13b32d67976e4c
  tests120 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests126
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds { (#,#) ipv2 ipv3 ->
                 case Text.Read.readEither8
                        @ Defs.Database
                        (Text.ParserCombinators.ReadP.run
                           @ Defs.Database
                           Main.tests100
                           ipv3) of wild {
                   []
                   -> case Main.tests99
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   : x ds2
                   -> case ds2 of wild1 {
                        []
                        -> let {
                             $j :: Defs.Database
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                               <join 1> {- Arity: 1, Strictness: <S,U> -}
                             = \ (ndb :: Defs.Database)[OneShot] ->
                               case SolverImpl.install
                                      ndb
                                      Main.tests96 `cast` (Sym (Defs.N:PName[0])) of wild2 {
                                 GHC.Base.Nothing
                                 -> case Main.tests125
                                           (GHC.Base.Nothing @ [(Defs.PName, Defs.Version)])
                                           ipv2
                                    ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                              [GHC.Types.Char] #)
                                    of {}
                                 GHC.Base.Just a1
                                 -> case GHC.Classes.$fEq[]_$c==
                                           @ (Defs.PName, Defs.Version)
                                           Main.$s$fEq(,)
                                           a1
                                           Main.tests121 of wild3 {
                                      GHC.Types.False
                                      -> case Main.tests125 wild2 ipv2
                                         ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                   [GHC.Types.Char] #)
                                         of {}
                                      GHC.Types.True
                                      -> (# ipv2, GHC.Types.[] @ GHC.Types.Char #) } }
                           } in
                           case x `cast` (Defs.N:Database[0]) of wild2 {
                             []
                             -> $j (GHC.Types.[] @ Defs.Pkg) `cast` (Sym (Defs.N:Database[0]))
                             : ipv4 ipv5
                             -> case SolverImpl.isConsistentDB
                                       (Data.OldList.sortBy @ Defs.Pkg SolverImpl.pkgCompare wild2)
                                         `cast`
                                       (Sym (Defs.N:Database[0])) of wild3 {
                                  Data.Either.Left ipv6
                                  -> case (GHC.Magic.noinline
                                             @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                                             GHC.IO.failIO1
                                               `cast`
                                             (forall (a :: <*>_N).
                                              <GHC.Base.String>_R
                                              ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                                             @ ()
                                             Main.tests55)
                                            `cast`
                                          (GHC.Types.N:IO[0] <()>_R)
                                            ipv2 of ds3 { (#,#) ipv7 ipv8 ->
                                     (# ipv7, GHC.Types.[] @ GHC.Types.Char #) }
                                  Data.Either.Right ndb -> $j ndb } }
                        : ipv4 ipv5
                        -> case Main.tests54
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {} } } } }) -}
2d2f3555a8674ca934ae82f785aaed1f
  tests121 :: [(Defs.PName, Defs.Version)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, Defs.Version)
                   Main.tests122
                   Main.tests110) -}
74e5e7a76914ebda8946c425fe003d17
  tests122 :: (Defs.PName, Defs.Version)
  {- Strictness: m,
     Unfolding: ((Main.tests79 `cast` (Sym (Defs.N:PName[0])),
                  Main.tests123 `cast` (Sym (Defs.N:Version[0])))) -}
e94b3f2e37adc8a58363fcfe08f23c06
  tests123 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.: @ Defs.VNum Main.tests85 Main.tests124) -}
b153495f6522a08439ea3889939c2692
  tests124 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   Main.tests87
                   (GHC.Types.[] @ Defs.VNum)) -}
c18c450d3f934af623c927de8f43fec3
  tests125 ::
    GHC.Base.Maybe Defs.Sol
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <B,U><B,U>x -}
13cfa6f1b1bd52dab63644244f3ab074
  tests126 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Main.path
                   Main.tests127) -}
6363afb064b2205476c4434b9cf98cb7
  tests127 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests128) -}
c052e100b0672c96fae9e7284dd178fa
  tests128 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test1e"#) -}
2d7282436351bc1196d611b00707bb2b
  tests129 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests130) -}
ee72284207a39b465b6b3cc247e499c7
  tests13 ::
    GHC.Base.Maybe Defs.Sol
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <B,U><B,U>x -}
acb341b188b9954ad590cef8894b9421
  tests130 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("intro"#) -}
f96974f3a29a798e8b2b32bdc7322feb
  tests131 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.tests138
                   Main.tests132
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
ab4d7049df13d36a78cf8b35d2b08d40
  tests132 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.tests_eta of wild {
                   GHC.Base.Nothing
                   -> case Main.tests135 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   GHC.Base.Just a1
                   -> case GHC.Classes.$fEq[]_$c==
                             @ (Defs.PName, Defs.Version)
                             Main.$s$fEq(,)
                             a1
                             Main.tests133 of wild1 {
                        GHC.Types.False
                        -> case Main.tests135 s
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        GHC.Types.True -> (# s, GHC.Types.[] @ GHC.Types.Char #) } }) -}
dc0e53a2eb904aaa776e0a9028752661
  tests133 :: [(Defs.PName, Defs.Version)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, Defs.Version)
                   Main.tests134
                   (GHC.Types.[] @ (Defs.PName, Defs.Version))) -}
eacbe877aab5b62117adf14a8128261d
  tests134 :: (Defs.PName, Defs.Version)
  {- Strictness: m,
     Unfolding: ((Main.tests96 `cast` (Sym (Defs.N:PName[0])),
                  Main.tests124 `cast` (Sym (Defs.N:Version[0])))) -}
4c22d9098fbef803f7f340c17e84d71c
  tests135 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
239801270eb90777500bf7b6a1ecdc03
  tests136 :: [Defs.Pkg]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.Pkg
                   Main.tests137
                   (GHC.Types.[] @ Defs.Pkg)) -}
3878c9d64fb139a290043cf1ea367805
  tests137 :: Defs.Pkg
  {- Strictness: m,
     Unfolding: (Defs.Pkg
                   Main.tests96 `cast` (Sym (Defs.N:PName[0]))
                   Main.tests124 `cast` (Sym (Defs.N:Version[0]))
                   (GHC.Types.[] @ GHC.Types.Char)
                   (GHC.Types.[] @ (Defs.PName, Defs.PConstr))) -}
f24bc7d5469f68b6b2db01f9dd0e0629
  tests138 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests139) -}
87a09f4761288d97d89cf96b089d8c85
  tests139 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("tiny"#) -}
f92254bcbc82f6874e494be8b9b95800
  tests14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests15) -}
61e0b1b0230f21b126444c44e9749d97
  tests140 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests141) -}
03903aba5acc9cb9f6e39a9f85045f2d
  tests141 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Solver tests"#) -}
a9bdd0517f26fdde21d90f446ddf2dd9
  tests142 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Main.tests243
                   Main.tests143) -}
c30c25243acca0925ecb586c2b3b3630
  tests143 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests238
                   Main.tests144) -}
4865eb200974d324fc0192f7b4e5b0e4
  tests144 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests234
                   Main.tests145) -}
ce51ba28f511fa7cc985b088f72a9d82
  tests145 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests230
                   Main.tests146) -}
e2a81b5bcde26c484dbad96a41901c29
  tests146 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests222
                   Main.tests147) -}
f4ff01efaf6c13cced4ea740c374b46c
  tests147 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests214
                   Main.tests148) -}
871f26a307eec2591216e1e2fff97bc0
  tests148 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests206
                   Main.tests149) -}
360245e78e5e49ba4cfd28ce6982ba4f
  tests149 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests198
                   Main.tests150) -}
5c1080f8d0bfb1b153635f957a5cfb4a
  tests15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("a"#) -}
9c04de3e223634e157867db64e1e4506
  tests150 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests190
                   Main.tests151) -}
9420f8f3f91b6138ff89b276f9fb49b0
  tests151 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests182
                   Main.tests152) -}
e107c8b36ad735c8b37d6e6015983d98
  tests152 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests174
                   Main.tests153) -}
e05aad748e6494c56828f5edb346e987
  tests153 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests166
                   Main.tests154) -}
2dfef5d9958b0875455e8c09494e0060
  tests154 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests155
                   (GHC.Types.[] @ Test.Tasty.Core.TestTree)) -}
13d420d45dce9478a18eeb547cbb614e
  tests155 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.tests164
                   Main.tests156
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
685773076e81605105cac174f5cd2a39
  tests156 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.tests161
                        Main.tests159
                        Main.tests157
                        s of ds { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Types.[] @ GHC.Types.Char #) }) -}
bcacde1f2eada11d7cc9ba269dc32464
  tests157 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests158) -}
c872c2bd0fc016e8f0fa11ec119a4c90
  tests158 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test11e"#) -}
f31d2c4011860810a6b1f4583602df37
  tests159 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests160) -}
8b4331da384d2501329340933a01675d
  tests16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Main.path
                   Main.tests17) -}
6467f2a9ef37bc178a911a07dc291e28
  tests160 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test11"#) -}
d5ae9126c5557916b62404735d0c84a9
  tests161 ::
    [GHC.Types.Char]
    -> [GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,1*U><L,1*U><S,U>,
     Unfolding: (\ (pAct :: [GHC.Types.Char])
                   (pExp :: [GHC.Types.Char])
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        (GHC.Base.++ @ GHC.Types.Char Main.path pAct)
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.FD.openFile1
                        (GHC.Base.++ @ GHC.Types.Char Main.path pExp)
                        GHC.IO.IOMode.ReadMode
                        ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv5
                        ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                 case Text.Read.readEither8
                        @ Defs.Database
                        (Text.ParserCombinators.ReadP.run
                           @ Defs.Database
                           Main.tests100
                           ipv7) of wild {
                   []
                   -> case Main.tests99
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   : x ds4
                   -> case ds4 of wild1 {
                        []
                        -> case (Text.Parsec.Prim.runPT
                                   @ GHC.Base.String
                                   @ Data.Functor.Identity.Identity
                                   @ GHC.Types.Char
                                   @ ()
                                   @ Defs.Database
                                   (ParserImpl.$s$fStream[]mtok @ GHC.Types.Char)
                                   ParserImpl.databaseParser1
                                     `cast`
                                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                             <[GHC.Types.Char]>_R
                                             <()>_R
                                             <Data.Functor.Identity.Identity>_R
                                             <Defs.Database>_R))
                                   GHC.Tuple.()
                                   (GHC.Types.[] @ GHC.Types.Char)
                                   ipv3)
                                  `cast`
                                (Data.Functor.Identity.N:Identity[0]
                                     <Data.Either.Either
                                        Text.Parsec.Error.ParseError Defs.Database>_R) of wild2 {
                             Data.Either.Left err -> Main.tests163 err x ipv6
                             Data.Either.Right db
                             -> case GHC.Classes.$fEq[]_$c==
                                       @ Defs.Pkg
                                       Defs.$fEqPkg
                                       db `cast` (Defs.N:Database[0])
                                       x `cast` (Defs.N:Database[0]) of wild3 {
                                  GHC.Types.False
                                  -> Main.tests162
                                       (Data.Either.Right @ Defs.ErrMsg @ Defs.Database db)
                                       x
                                       ipv6
                                  GHC.Types.True -> (# ipv6, GHC.Tuple.() #) } }
                        : ipv8 ipv9
                        -> case Main.tests54
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                           of {} } } } } } }) -}
93837ce72e9811ab828bfa1766c041a4
  tests162 ::
    Data.Either.Either Defs.ErrMsg Defs.Database
    -> Defs.Database
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <B,U><B,U><B,U>x -}
3a190a5cffa3e66edb007fc6da762445
  tests163 ::
    Text.Parsec.Error.ParseError
    -> Defs.Database
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <B,1*U(U(1*U,U,U),1*U)><B,U><B,U>x -}
e505c406c05b5746f5999b823a19aa8c
  tests164 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests165) -}
e1f73bf6330a8499c796bcbea94bb9c1
  tests165 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("version suffix"#) -}
5afa150bb6fc675d0eddcd19d03f112f
  tests166 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.tests172
                   Main.tests167
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
39be9d24b21e3731a004d699d635a868
  tests167 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.tests161
                        Main.tests170
                        Main.tests168
                        s of ds { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Types.[] @ GHC.Types.Char #) }) -}
56b988d93ca0f360b434b7c1da1a3e03
  tests168 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests169) -}
3407913e1a6276f797ad219dc6f2f0bf
  tests169 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test10e"#) -}
d54eef485a8fe315c230593e40aad47e
  tests17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests18) -}
d190c27b5b8672b113d2509d40edca48
  tests170 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests171) -}
fceca385427ef9a58398d5686f30d7dc
  tests171 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test10"#) -}
a36989378e324d49a58871dad1b72dc0
  tests172 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests173) -}
ce9db5288e819e4ee517f43ba277a5eb
  tests173 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("general name"#) -}
38738f976c603af24c9e4aa430f01949
  tests174 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.tests180
                   Main.tests175
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
f2354bf676085df44c7dbaf6124a9ec5
  tests175 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.tests161
                        Main.tests178
                        Main.tests176
                        s of ds { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Types.[] @ GHC.Types.Char #) }) -}
865be97beb590176413cc907fab5981f
  tests176 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests177) -}
6cc6bf18dc876ea1ab2677d2513d7c68
  tests177 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test9e"#) -}
08e9ffb637724f08d27f5b6ec3249e09
  tests178 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests179) -}
b3e630c761f3672249d89eb7eef6736c
  tests179 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test9"#) -}
58d10877a48e0f0a2e660d344d6c19ed
  tests18 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test14"#) -}
1599fabd08f7de3eb28f1ff0d52c4b39
  tests180 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests181) -}
85201d911629c1c6159a0aeacb1441f4
  tests181 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("simple name"#) -}
754df33e8c39340d324f55818cfb2589
  tests182 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.tests188
                   Main.tests183
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
e3a6a65a49238fc91210400917973243
  tests183 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.tests161
                        Main.tests186
                        Main.tests184
                        s of ds { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Types.[] @ GHC.Types.Char #) }) -}
0d9da6e649881ca5497378128dd2cf0b
  tests184 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests185) -}
ce37a13df76e0ad8d3594021e392af89
  tests185 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test8e"#) -}
f5859c0e58ba53c44b165893e070ef2d
  tests186 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests187) -}
dcfef45e3046b32497b0fc033839948b
  tests187 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test8"#) -}
4182fc532b505f1563ffc04944769c61
  tests188 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests189) -}
7a38b1da4982a9a234aa359240c1ba87
  tests189 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ending semi colon"#) -}
8e5b70957e98da21589297dffb3df6a0
  tests19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests20) -}
c74da827d6ed298b2accbebcd59a3302
  tests190 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.tests196
                   Main.tests191
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
8e9dc387f6525d42178fdaf49ad165b3
  tests191 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.tests161
                        Main.tests194
                        Main.tests192
                        s of ds { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Types.[] @ GHC.Types.Char #) }) -}
2dc51d81c8e8901bf96b5dea216c46e2
  tests192 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests193) -}
101451c8abd8a77df39feadaad7e2d5e
  tests193 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test7e"#) -}
d03466bfa57b6503e3fab8a9bb862258
  tests194 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests195) -}
60f8ffd7f4e61a446b6cb87efdfe49b9
  tests195 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test7"#) -}
8d10366e2caa6579216fcf8a874192fc
  tests196 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests197) -}
b4997c4cc18963f6ce90666c6fe3f628
  tests197 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("no ending semi colon"#) -}
2c4c8a2e30b54325b89ec301b451758e
  tests198 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.tests204
                   Main.tests199
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
d58fd3d62e9f2c57448b4f7fe5932beb
  tests199 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.tests161
                        Main.tests202
                        Main.tests200
                        s of ds { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Types.[] @ GHC.Types.Char #) }) -}
9b5d0f50dac755a1c6306a8ebb62767a
  tests2 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests142
                   Main.tests3) -}
5673ef788fdd4ebcf2ed57360e3afc22
  tests20 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Small special case"#) -}
c1a507d85b30d517190bd6f70e60f855
  tests200 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests201) -}
64677411c6479f2b9ac91f6a7098e827
  tests201 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test6e"#) -}
5ceed9410e360527b28273d8debaaa24
  tests202 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests203) -}
2f77a5071c4a8b29582c6c8f65531959
  tests203 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test6"#) -}
c8d8c972d6c6d18d9990a2192f4ac1f4
  tests204 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests205) -}
9996ec85653854f194028123899d3624
  tests205 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("no version"#) -}
03d0b4226586a7ce5bbcad4bb9f92f48
  tests206 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.tests212
                   Main.tests207
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
e2ee5bfc33bb31b715df3e629684ea31
  tests207 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.tests161
                        Main.tests210
                        Main.tests208
                        s of ds { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Types.[] @ GHC.Types.Char #) }) -}
6d203c63713ce2d3c790e460d19169c3
  tests208 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests209) -}
97ec46c3551fd5383eaab68baabddf11
  tests209 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test5e"#) -}
1c2d68a108a6265eeb2504af9d136383
  tests21 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.tests50
                   Main.tests22
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
00e6d71161f3d63d6da33cdd6fd979fd
  tests210 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests211) -}
4f3db570c2049f2ce30243c131f72940
  tests211 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test5"#) -}
fd3840893d73db02ff89043fdccff5b2
  tests212 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests213) -}
103ca5c6d46e6be564af2182c3c3fa6e
  tests213 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("no description"#) -}
4540834251b5d401bec8426cddd79893
  tests214 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.tests220
                   Main.tests215
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
d709dbcc698c96e15d02b53eb5ac4a12
  tests215 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.tests161
                        Main.tests218
                        Main.tests216
                        s of ds { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Types.[] @ GHC.Types.Char #) }) -}
c50945b58abbb20fcc1c0389ad36400b
  tests216 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests217) -}
bc54a378671923baa43d814ee4876a80
  tests217 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test4e"#) -}
943c2e5cb640176751032a51b7a32050
  tests218 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests219) -}
7827af775423e88594b4d4be88957c5f
  tests219 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test4"#) -}
b2636ad84d2455293640a45a7ce3c81c
  tests22 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests47
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds { (#,#) ipv2 ipv3 ->
                 case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Char
                         @ ()
                         @ Defs.Database
                         (ParserImpl.$s$fStream[]mtok @ GHC.Types.Char)
                         ParserImpl.databaseParser1
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <[GHC.Types.Char]>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <Defs.Database>_R))
                         GHC.Tuple.()
                         (GHC.Types.[] @ GHC.Types.Char)
                         ipv3)
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError Defs.Database>_R) of wild {
                   Data.Either.Left err
                   -> case (GHC.Magic.noinline
                              @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                              GHC.IO.failIO1
                                `cast`
                              (forall (a :: <*>_N).
                               <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                              @ ()
                              (GHC.Types.[] @ GHC.Types.Char))
                             `cast`
                           (GHC.Types.N:IO[0] <()>_R)
                             ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                      (# ipv4, GHC.Types.[] @ GHC.Types.Char #) }
                   Data.Either.Right db
                   -> let {
                        $j :: Defs.Database
                              -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                          <join 1> {- Arity: 1, Strictness: <S,U> -}
                        = \ (ndb :: Defs.Database)[OneShot] ->
                          case SolverImpl.install
                                 ndb
                                 Main.tests14 `cast` (Sym (Defs.N:PName[0])) of wild1 {
                            GHC.Base.Nothing
                            -> case Main.tests46
                                      (GHC.Base.Nothing @ [(Defs.PName, Defs.Version)])
                                      ipv2
                               ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                               of {}
                            GHC.Base.Just a1
                            -> case GHC.Classes.$fEq[]_$c==
                                      @ (Defs.PName, Defs.Version)
                                      Main.$s$fEq(,)
                                      a1
                                      Main.tests23 of wild2 {
                                 GHC.Types.False
                                 -> case Main.tests46 wild1 ipv2
                                    ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                              [GHC.Types.Char] #)
                                    of {}
                                 GHC.Types.True -> (# ipv2, GHC.Types.[] @ GHC.Types.Char #) } }
                      } in
                      case db `cast` (Defs.N:Database[0]) of wild1 {
                        []
                        -> $j (GHC.Types.[] @ Defs.Pkg) `cast` (Sym (Defs.N:Database[0]))
                        : ipv4 ipv5
                        -> case SolverImpl.isConsistentDB
                                  (Data.OldList.sortBy @ Defs.Pkg SolverImpl.pkgCompare wild1)
                                    `cast`
                                  (Sym (Defs.N:Database[0])) of wild2 {
                             Data.Either.Left ipv6
                             -> case (GHC.Magic.noinline
                                        @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                                        GHC.IO.failIO1
                                          `cast`
                                        (forall (a :: <*>_N).
                                         <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                                        @ ()
                                        (GHC.Types.[] @ GHC.Types.Char))
                                       `cast`
                                     (GHC.Types.N:IO[0] <()>_R)
                                       ipv2 of ds2 { (#,#) ipv7 ipv8 ->
                                (# ipv7, GHC.Types.[] @ GHC.Types.Char #) }
                             Data.Either.Right ndb -> $j ndb } } } } }) -}
1171f7371fa9e391df1a0e9bc4004698
  tests220 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests221) -}
965de0c88cea5fe223fd88573ab73556
  tests221 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("jumbled clause order"#) -}
60a626423de48afa9f96cd24a3301701
  tests222 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.tests228
                   Main.tests223
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
fd8fa5c725aa8a043127d6f106b3e04c
  tests223 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.tests161
                        Main.tests226
                        Main.tests224
                        s of ds { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Types.[] @ GHC.Types.Char #) }) -}
db1baba94969e47b8b681a3a96d2ab99
  tests224 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests225) -}
5e7c365f56f93ea74776acd9f7f052e7
  tests225 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test3e"#) -}
815b5cfbef5f2a90332d5660a7ab83ec
  tests226 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests227) -}
86615ed3da88aa5c5a3a27e3b761f495
  tests227 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test3"#) -}
d6d71503521671bb28000ebadf17bb47
  tests228 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests229) -}
fd226e3a05bee337639a2679978327fa
  tests229 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("case insensitive keywords"#) -}
07892243d3ceabf2b4392d2df8b137d4
  tests23 :: [(Defs.PName, Defs.Version)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, Defs.Version)
                   Main.tests43
                   Main.tests24) -}
b6ae119541ca2ea6bab5a0528af74407
  tests230 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.tests117
                   Main.tests231
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
ea7096a90b1deae20554871876690b5b
  tests231 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.tests161
                        Main.tests232
                        Main.tests115
                        s of ds { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Types.[] @ GHC.Types.Char #) }) -}
89ecae1be1b7563cdd6574eff9f2e862
  tests232 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests233) -}
30939e7bc3a3139b1893ceccfeccb79a
  tests233 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test2"#) -}
17a44bb7425c45fdbc733a1985904c95
  tests234 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.tests129
                   Main.tests235
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
2f1614cbf93868ce5d4435f50795aaf6
  tests235 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.tests161
                        Main.tests236
                        Main.tests127
                        s of ds { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Types.[] @ GHC.Types.Char #) }) -}
ff7d2bee13eb482cf1ef1ecc07838a34
  tests236 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests237) -}
b06c5dca36429c92288167f829d02053
  tests237 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test1"#) -}
885af2bde692f263cbf8cd5b6982e578
  tests238 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.tests138
                   Main.tests239
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
ebe77e5963cffc6eea86c4b848a731ed
  tests239 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.tests_eta1 of wild {
                   Data.Either.Left a1
                   -> case Main.tests240 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   Data.Either.Right a1
                   -> case GHC.Classes.$fEq[]_$c==
                             @ Defs.Pkg
                             Defs.$fEqPkg
                             a1 `cast` (Defs.N:Database[0])
                             Main.tests136 of wild1 {
                        GHC.Types.False
                        -> case Main.tests240 s
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        GHC.Types.True -> (# s, GHC.Types.[] @ GHC.Types.Char #) } }) -}
82db5cefe43766bf2e31b5cc932111af
  tests24 :: [(Defs.PName, Defs.Version)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, Defs.Version)
                   Main.tests40
                   Main.tests25) -}
b52660f8c667cb062a643775e397e19a
  tests240 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
f87d6ac9838daa1bbbcc31f064f4b59c
  tests241 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests242) -}
22076cb0c5efcee49f01c906ad48424b
  tests242 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("package {name foo}"#) -}
caf64d85e9906853286418653c04ea81
  tests243 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests244) -}
7edfafea365284a1c6f9a8a420bad3ac
  tests244 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Parser tests"#) -}
29d260b9f3f00a86fcceadfa76414e83
  tests245 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Main.tests364
                   Main.tests246) -}
58a6e3746f4f44ced1ba9ed6f7f72e48
  tests246 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests323
                   Main.tests247) -}
a793d4cf4766e2a9801c89164014b260
  tests247 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests313
                   Main.tests248) -}
e8da53db179cdcbaf0335e2d41e250f8
  tests248 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests293
                   Main.tests249) -}
9d1549f8b2b23f2d2efe5a62836a6e6c
  tests249 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests282
                   Main.tests250) -}
54a8ccf36e5290c16983cc8ed5907f90
  tests25 :: [(Defs.PName, Defs.Version)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, Defs.Version)
                   Main.tests34
                   Main.tests26) -}
386eaea30953fdf72dcfe94aeba20635
  tests250 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests266
                   Main.tests251) -}
db4df63c4ae6803eb4deedb920ed8ee5
  tests251 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests252
                   (GHC.Types.[] @ Test.Tasty.Core.TestTree)) -}
a7d58f15d487f41b195598fe9af2db9c
  tests252 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.tests264
                   Main.tests253
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
13b05193c68efa28dc80a043ab8628ab
  tests253 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.tests_eta2 of wild {
                   GHC.Base.Nothing
                   -> case Main.tests262 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   GHC.Base.Just a1
                   -> case GHC.Classes.$fEq[]_$c==
                             @ (Defs.PName, Defs.PConstr)
                             Defs.$fEqPkg_$s$fEq(,)
                             a1
                             Main.tests254 of wild1 {
                        GHC.Types.False
                        -> case Main.tests262 s
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        GHC.Types.True -> (# s, GHC.Types.[] @ GHC.Types.Char #) } }) -}
5aadbc82af66da2db17fdbea958745ce
  tests254 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   Main.tests258
                   Main.tests255) -}
58b7f73827265938c064cf9d4019b093
  tests255 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   Main.tests256
                   (GHC.Types.[]
                      @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version)))) -}
e21449eb04d439e0696751d099b0bf01
  tests256 ::
    (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((Main.tests41 `cast` (Sym (Defs.N:PName[0])),
                  Main.tests257)) -}
24a52257e26ea0c67adb68789ebdac49
  tests257 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.True,
                  Defs.minV1 `cast` (Sym (Defs.N:Version[0])),
                  Defs.maxV1 `cast` (Sym (Defs.N:Version[0])))) -}
5cb0d90d13b58720e663dabd4ea97a84
  tests258 ::
    (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((Main.tests260 `cast` (Sym (Defs.N:PName[0])),
                  Main.tests259)) -}
87261704a3d203fa5b80cea99b3a06cc
  tests259 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.False,
                  Defs.minV1 `cast` (Sym (Defs.N:Version[0])),
                  Defs.maxV1 `cast` (Sym (Defs.N:Version[0])))) -}
ce5ba95d8a9a7e48db0ca6b9c1af967c
  tests26 :: [(Defs.PName, Defs.Version)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, Defs.Version)
                   Main.tests27
                   (GHC.Types.[] @ (Defs.PName, Defs.Version))) -}
f1ca3e289d53aed21f442e0926e6bf7a
  tests260 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests261) -}
f50c1ac1d0fbd123682a70a3629e1dc3
  tests261 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("e"#) -}
aff17ebed7e888cdf1e3a9d627d3e601
  tests262 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
90331a567b3bf2037de76394bdcfe337
  tests263 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   Main.tests258
                   (GHC.Types.[]
                      @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version)))) -}
4fb4ffd456e3f2044f7105c8f05a3681
  tests264 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests265) -}
ef623efe1123328f1e614ab880f9963f
  tests265 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("req and conf"#) -}
3a4a5dad0a4cf64cd0647f2fae863b3e
  tests266 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.tests280
                   Main.tests267
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
bf59cd570be068767148c6498b4ff137
  tests267 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.tests_eta3 of wild {
                   GHC.Base.Nothing -> (# s, GHC.Types.[] @ GHC.Types.Char #)
                   GHC.Base.Just a1
                   -> case Main.tests268 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {} }) -}
a98741adbac7fe6e23e021a3a99eb560
  tests268 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
9f47d56da3ce5f61c66a4f5e28724d0d
  tests269 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   Main.tests270
                   (GHC.Types.[]
                      @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version)))) -}
6db5cd68aa79b24314ec6ff7ff7fcd9a
  tests27 :: (Defs.PName, Defs.Version)
  {- Strictness: m,
     Unfolding: ((Main.tests14 `cast` (Sym (Defs.N:PName[0])),
                  Main.tests28 `cast` (Sym (Defs.N:Version[0])))) -}
e05c5a3cf78a14fcd8f206a3daa0be50
  tests270 ::
    (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((Main.tests96 `cast` (Sym (Defs.N:PName[0])),
                  Main.tests271)) -}
269bd857af08085d5bce126acdb99e5f
  tests271 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.True,
                  Main.tests273 `cast` (Sym (Defs.N:Version[0])),
                  Main.tests272 `cast` (Sym (Defs.N:Version[0])))) -}
e1af444c0da5f00b689f2a10351507ae
  tests272 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   Main.tests89
                   (GHC.Types.[] @ Defs.VNum)) -}
05fd4ae763b3624569a69da1bbc44baf
  tests273 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   Main.tests32
                   (GHC.Types.[] @ Defs.VNum)) -}
c8dcf717059f5006092980e3b9cab21d
  tests274 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   Main.tests275
                   (GHC.Types.[]
                      @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version)))) -}
7bb5107609fa8d81b5499922e0f87179
  tests275 ::
    (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((Main.tests96 `cast` (Sym (Defs.N:PName[0])),
                  Main.tests276)) -}
5e76e6777475ac8192945aaeee6b98b6
  tests276 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.True,
                  Main.tests272 `cast` (Sym (Defs.N:Version[0])),
                  Main.tests277 `cast` (Sym (Defs.N:Version[0])))) -}
a5664f97cef26994e3d20c3d7c646a09
  tests277 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   Main.tests278
                   (GHC.Types.[] @ Defs.VNum)) -}
f70e0d977d4516ea97d1f3e5dbdb31c8
  tests278 :: Defs.VNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Defs.VN
                   Main.tests279
                   (GHC.Types.[] @ GHC.Types.Char)) -}
289258de8a11b953fc300d577040bee5
  tests279 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 8#) -}
f547db06f8b97c1980dc5a0a1af81141
  tests28 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.: @ Defs.VNum Main.tests32 Main.tests29) -}
2dd6372b78b6f37a8fe1bcd2c6edf0fc
  tests280 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests281) -}
f74d03626b8d200a7b1d3e3ee5d637f2
  tests281 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("forumExample2"#) -}
79d78e1c465dc53285853112f6b03cb0
  tests282 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.tests291
                   Main.tests283
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
f98f4be290fcd8d0e9a24cd2388c087b
  tests283 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.tests_eta4 of wild {
                   GHC.Base.Nothing
                   -> case Main.tests284 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   GHC.Base.Just a1
                   -> case GHC.Classes.$fEq[]_$c==
                             @ (Defs.PName, Defs.PConstr)
                             Defs.$fEqPkg_$s$fEq(,)
                             a1
                             Main.tests269 of wild1 {
                        GHC.Types.False
                        -> case Main.tests284 s
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        GHC.Types.True -> (# s, GHC.Types.[] @ GHC.Types.Char #) } }) -}
92193cb811a2b3fc1099582303c0fab8
  tests284 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
791eec2daa6cbf6ccd10667d8f4a662e
  tests285 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   Main.tests286
                   (GHC.Types.[]
                      @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version)))) -}
af780913a01bc09760b212bf8fdf365f
  tests286 ::
    (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((Main.tests96 `cast` (Sym (Defs.N:PName[0])),
                  Main.tests287)) -}
b2725a1c3d63c485e7ccdb66d9bcd9c6
  tests287 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.False,
                  Main.tests273 `cast` (Sym (Defs.N:Version[0])),
                  Main.tests272 `cast` (Sym (Defs.N:Version[0])))) -}
a45b524a398f02ed482e589798ae8546
  tests288 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   Main.tests289
                   (GHC.Types.[]
                      @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version)))) -}
fe841774142eac3d0903943baf9b2b2b
  tests289 ::
    (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((Main.tests96 `cast` (Sym (Defs.N:PName[0])),
                  Main.tests290)) -}
e3ba125bfc7e83a3fcdaf7e119cf6bb7
  tests29 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   Main.tests30
                   (GHC.Types.[] @ Defs.VNum)) -}
e06a8b7b05255415a42ebdbfdefffb1a
  tests290 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.True,
                  Main.tests84 `cast` (Sym (Defs.N:Version[0])),
                  Main.tests277 `cast` (Sym (Defs.N:Version[0])))) -}
8c2ae5a3746cf87162a0032f533f0159
  tests291 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests292) -}
a08480112b2bc4d4ed3fdd7bd177a69a
  tests292 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("forumExample1"#) -}
eb301ed3bdc5224b1a61b676b2dfc436
  tests293 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.tests311
                   Main.tests294
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
3e1409262cd942ca28010f208c51d947
  tests294 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.tests_eta5 of wild {
                   GHC.Base.Nothing
                   -> case Main.tests306 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   GHC.Base.Just a1
                   -> case GHC.Classes.$fEq[]_$c==
                             @ (Defs.PName, Defs.PConstr)
                             Defs.$fEqPkg_$s$fEq(,)
                             a1
                             Main.tests295 of wild1 {
                        GHC.Types.False
                        -> case Main.tests306 s
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        GHC.Types.True -> (# s, GHC.Types.[] @ GHC.Types.Char #) } }) -}
e0a5ade53a2f5d18b7c8aa081de6560b
  tests295 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   Main.tests300
                   Main.tests296) -}
bdb065ab7451b3276556138f99974310
  tests296 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   Main.tests297
                   (GHC.Types.[]
                      @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version)))) -}
4952c6ae8fe74030afd044d92dcc1a95
  tests297 ::
    (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((Main.tests79 `cast` (Sym (Defs.N:PName[0])),
                  Main.tests298)) -}
86754c8a3675eee09d28418582b78602
  tests298 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.True,
                  Main.tests29 `cast` (Sym (Defs.N:Version[0])),
                  Main.tests299 `cast` (Sym (Defs.N:Version[0])))) -}
6c723f1dde2c9a836fb6b575f06781cf
  tests299 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.: @ Defs.VNum Main.tests85 Main.tests29) -}
ac0885c4a3623fb2b8cd409af05a6788
  tests3 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests4
                   (GHC.Types.[] @ Test.Tasty.Core.TestTree)) -}
e6a909e3bde2517897e4178af8612f3c
  tests30 :: Defs.VNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Defs.VN
                   Main.tests31
                   (GHC.Types.[] @ GHC.Types.Char)) -}
fc67f8695fa60cffe9e06ba11b10cfad
  tests300 ::
    (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((Main.tests96 `cast` (Sym (Defs.N:PName[0])),
                  Main.tests301)) -}
48f169f9445419d5f31952de87fc0728
  tests301 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.False,
                  Main.tests304 `cast` (Sym (Defs.N:Version[0])),
                  Main.tests302 `cast` (Sym (Defs.N:Version[0])))) -}
bdee123d1f36ab62b2768aee5acbf6d9
  tests302 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.: @ Defs.VNum Main.tests67 Main.tests303) -}
84bd6f623661d2e9ad250de7df0316b6
  tests303 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.: @ Defs.VNum Main.tests32 Main.tests84) -}
bf9045fdc34e2a71b62296846c35a2fe
  tests304 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.: @ Defs.VNum Main.tests67 Main.tests305) -}
df632420908633089dac9f7b73e515a3
  tests305 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.: @ Defs.VNum Main.tests32 Main.tests273) -}
d687c6b634e751e16c393b3f8e34bd48
  tests306 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
3b60da73671bacb86baa83eb7d05bf62
  tests307 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   Main.tests308
                   (GHC.Types.[]
                      @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version)))) -}
e8ea70fc53831a47c6ef925b4ba4b81c
  tests308 ::
    (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((Main.tests79 `cast` (Sym (Defs.N:PName[0])),
                  Main.tests309)) -}
1795331a7f48029179451cbac4438880
  tests309 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.True,
                  Defs.minV1 `cast` (Sym (Defs.N:Version[0])),
                  Main.tests299 `cast` (Sym (Defs.N:Version[0])))) -}
13704ed108fa39add40e5bcb44618b94
  tests31 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
097bc64d70c320e74b98234390196876
  tests310 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   Main.tests300
                   (GHC.Types.[]
                      @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version)))) -}
2b1a175902fbe03d65a49895cffd2dfb
  tests311 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests312) -}
990ce22c4d8460b2bd113a83b70268a7
  tests312 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("examExample3"#) -}
4b0ff66820870f041564c98ffe117ff5
  tests313 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.tests321
                   Main.tests314
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
e12180ad6608838b5a9b2b10e634643c
  tests314 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.tests_eta6 of wild {
                   GHC.Base.Nothing -> (# s, GHC.Types.[] @ GHC.Types.Char #)
                   GHC.Base.Just a1
                   -> case Main.tests315 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {} }) -}
cea31db88b4246631142dca48a7df4a6
  tests315 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
52bda09eaca7333681c4d2f8682691ea
  tests316 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   Main.tests317
                   (GHC.Types.[]
                      @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version)))) -}
0c753a8c754e10dcdc048f42d3437e6c
  tests317 ::
    (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((Main.tests96 `cast` (Sym (Defs.N:PName[0])),
                  Main.tests309)) -}
30350c84795abd3757562d1e9679fd84
  tests318 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   Main.tests319
                   (GHC.Types.[]
                      @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version)))) -}
0349ae7b7143bd9554f00a4f816cde94
  tests319 ::
    (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((Main.tests96 `cast` (Sym (Defs.N:PName[0])),
                  Main.tests320)) -}
2d819fd6c517a821b41bce10c0351171
  tests32 :: Defs.VNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Defs.VN
                   Main.tests33
                   (GHC.Types.[] @ GHC.Types.Char)) -}
340d080ff55440da37ab5d5d29483c9d
  tests320 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.True,
                  Main.tests35 `cast` (Sym (Defs.N:Version[0])),
                  Defs.maxV1 `cast` (Sym (Defs.N:Version[0])))) -}
a09b5e82abdbe7cff145009bb8ac08f3
  tests321 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests322) -}
23923ee3d47e42253a0284a9d2ccfcff
  tests322 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("examExample2"#) -}
90c433106184d1536ffeb4c82e97b083
  tests323 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.tests362
                   Main.tests324
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
e4c7ce7f75d8700f5b285b207e6d04a9
  tests324 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.tests_eta7 of wild {
                   GHC.Base.Nothing
                   -> case Main.tests343 s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   GHC.Base.Just a1
                   -> case GHC.Classes.$fEq[]_$c==
                             @ (Defs.PName, Defs.PConstr)
                             Defs.$fEqPkg_$s$fEq(,)
                             a1
                             Main.tests325 of wild1 {
                        GHC.Types.False
                        -> case Main.tests343 s
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {}
                        GHC.Types.True -> (# s, GHC.Types.[] @ GHC.Types.Char #) } }) -}
9c601fb65a8fe5b7c4d396011009a337
  tests325 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   Main.tests339
                   Main.tests326) -}
70d9e084fd77a34f4876f73318106cce
  tests326 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   Main.tests332
                   Main.tests327) -}
ef4dee6967e1f895b755f510bc9f7045
  tests327 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   Main.tests328
                   (GHC.Types.[]
                      @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version)))) -}
0f94e83ea166b605def896567828d36b
  tests328 ::
    (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((Main.tests79 `cast` (Sym (Defs.N:PName[0])),
                  Main.tests329)) -}
00fae2049d7cf0c796f7961666d97ee2
  tests329 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- Strictness: m,
     Unfolding: ((GHC.Types.True,
                  Main.tests330 `cast` (Sym (Defs.N:Version[0])),
                  Main.tests84 `cast` (Sym (Defs.N:Version[0])))) -}
0c40d0b2a502c53b7c32bec5c9c7d44c
  tests33 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
7b3de6d1a3abcadfbb3137260068ef18
  tests330 :: [Defs.VNum]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   Main.tests331
                   (GHC.Types.[] @ Defs.VNum)) -}
17353e3c478656a2b8d7dc3634f37450
  tests331 :: Defs.VNum
  {- Strictness: m, Unfolding: (Defs.VN Main.tests88 Main.tests14) -}
f534a6209b47b307a7bcc2a4a768c7eb
  tests332 ::
    (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((Main.tests96 `cast` (Sym (Defs.N:PName[0])),
                  Main.tests333)) -}
e499ac01a88624c6bd4f10bfd67c6534
  tests333 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.True,
                  Main.tests338 `cast` (Sym (Defs.N:Version[0])),
                  Main.tests334 `cast` (Sym (Defs.N:Version[0])))) -}
f9a8580234579bdb1d89d439d4e39b3c
  tests334 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.: @ Defs.VNum Main.tests85 Main.tests335) -}
3ee54c5d8d380bf754cf154c35b47ac9
  tests335 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   Main.tests336
                   (GHC.Types.[] @ Defs.VNum)) -}
f1c1c0482efeea0807069e40fe0c8d16
  tests336 :: Defs.VNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Defs.VN
                   Main.tests337
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f92d1db6e5e31ee6a16f7003ed8c1b20
  tests337 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 7#) -}
e3508dd2bd93d0ddefbf1a6e37a06c48
  tests338 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.: @ Defs.VNum Main.tests85 Main.tests273) -}
be4bd1896b9883f63b07adaccd152287
  tests339 ::
    (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((Main.tests91 `cast` (Sym (Defs.N:PName[0])),
                  Main.tests340)) -}
814156b63d0b670784cf695f7d8ddfeb
  tests34 :: (Defs.PName, Defs.Version)
  {- Strictness: m,
     Unfolding: ((Main.tests38 `cast` (Sym (Defs.N:PName[0])),
                  Main.tests35 `cast` (Sym (Defs.N:Version[0])))) -}
0ec15e2a7411ca7100836c88a375cfd6
  tests340 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.True,
                  Main.tests299 `cast` (Sym (Defs.N:Version[0])),
                  Main.tests341 `cast` (Sym (Defs.N:Version[0])))) -}
f5346ad460953421a95c167c53558b46
  tests341 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.: @ Defs.VNum Main.tests67 Main.tests342) -}
469bb88dc69a2c57a791cd01e65815d9
  tests342 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   Main.tests36
                   (GHC.Types.[] @ Defs.VNum)) -}
25eabbbfc64de4d14778e17d6b3ea65b
  tests343 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
d3c6ef71c4a1dc0d366ab8bfea8cf2ae
  tests344 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   Main.tests328
                   Main.tests345) -}
1701dcc8bfa3f375bba9c12c69c63e23
  tests345 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   Main.tests332
                   Main.tests346) -}
c5daa55524063581dd48fe47adeb4ea4
  tests346 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   Main.tests347
                   (GHC.Types.[]
                      @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version)))) -}
9411efbb0e8289457472bcda95cc36dc
  tests347 ::
    (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((Main.tests91 `cast` (Sym (Defs.N:PName[0])),
                  Main.tests348)) -}
b20e1c99f9246d2ccf5e278538b87cf2
  tests348 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.False,
                  Main.tests299 `cast` (Sym (Defs.N:Version[0])),
                  Main.tests341 `cast` (Sym (Defs.N:Version[0])))) -}
26e3186c393d1f7d2fc26009f0990ba6
  tests349 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   Main.tests357
                   Main.tests350) -}
c1afb377cc49fbb08613289432b3f746
  tests35 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.: @ Defs.VNum Main.tests36 Main.tests29) -}
c6796b4e69a2d7d6fe7d4867bdab98cb
  tests350 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   Main.tests355
                   Main.tests351) -}
378ca592ab2534c986ff28a663f91640
  tests351 ::
    [(Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
                   Main.tests352
                   (GHC.Types.[]
                      @ (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version)))) -}
f65274aa6d58b15cc71abd2fe4d09980
  tests352 ::
    (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((Main.tests91 `cast` (Sym (Defs.N:PName[0])),
                  Main.tests353)) -}
a4c16020c7f0ec9e33a3454a79721bed
  tests353 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.True,
                  Main.tests354 `cast` (Sym (Defs.N:Version[0])),
                  Main.tests342 `cast` (Sym (Defs.N:Version[0])))) -}
f2474f23f42fdc1687716120407a9306
  tests354 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.: @ Defs.VNum Main.tests87 Main.tests95) -}
a6b747c51c698162fc95775910d8028a
  tests355 ::
    (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((Main.tests96 `cast` (Sym (Defs.N:PName[0])),
                  Main.tests356)) -}
c0635df5a092b55820b6d7f0b267d5dc
  tests356 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.False,
                  Main.tests94 `cast` (Sym (Defs.N:Version[0])),
                  Main.tests273 `cast` (Sym (Defs.N:Version[0])))) -}
00496fb21a8e99f118c869dd85170aa7
  tests357 ::
    (Defs.PName, (GHC.Types.Bool, Defs.Version, Defs.Version))
  {- Strictness: m,
     Unfolding: ((Main.tests79 `cast` (Sym (Defs.N:PName[0])),
                  Main.tests358)) -}
617ed1f17d1b37eedab966b291a367ff
  tests358 :: (GHC.Types.Bool, Defs.Version, Defs.Version)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.True,
                  Main.tests124 `cast` (Sym (Defs.N:Version[0])),
                  Main.tests359 `cast` (Sym (Defs.N:Version[0])))) -}
c3a67292cec429e1f9b0b0d77081cd35
  tests359 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   Main.tests360
                   (GHC.Types.[] @ Defs.VNum)) -}
4ed9dcc4863aaa17c2ba69171b99a725
  tests36 :: Defs.VNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Defs.VN
                   Main.tests37
                   (GHC.Types.[] @ GHC.Types.Char)) -}
55d3e45a140f58e9283bb91f0a353a1f
  tests360 :: Defs.VNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Defs.VN
                   Main.tests361
                   (GHC.Types.[] @ GHC.Types.Char)) -}
57889bf459cac8e30d29ed794ec1e5c1
  tests361 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.I# 1000000#) -}
05411c7260ca5387f29a7c7f6949fc55
  tests362 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests363) -}
d95bccb9ccf5a9224b9320f99bafc3cd
  tests363 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("examExample1"#) -}
87e8df9fd9bc88852c6de4fd49ce328d
  tests364 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests365) -}
a470bf1ae5ff82b46d8635907740d42c
  tests365 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Merge tests"#) -}
3ed3617ac3144ebea891e2fa0db3699c
  tests366 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests367) -}
7a54fd4bfd27a90cf2b3f6296894dcfb
  tests367 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Unit tests"#) -}
988b28e6400dad4a9a21de30ce5803ad
  tests37 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5#) -}
a8c75bf234738a05021576c3ad28699f
  tests38 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests39) -}
ea7634779352a51b2491979a96ff11f7
  tests39 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("d"#) -}
e0cdd1d61d9ec92214f33e95bdc58caa
  tests4 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup Main.tests140 Main.tests5) -}
a7a41db014ccc19962762284b8967b3b
  tests40 :: (Defs.PName, Defs.Version)
  {- Strictness: m,
     Unfolding: ((Main.tests41 `cast` (Sym (Defs.N:PName[0])),
                  Main.tests28 `cast` (Sym (Defs.N:Version[0])))) -}
2d36e7965db5517b553537c27f720ecb
  tests41 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests42) -}
029559a0ed296c2c8baa71d509a0804e
  tests42 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("c"#) -}
28e9ba6f84340989cc769152f624e132
  tests43 :: (Defs.PName, Defs.Version)
  {- Strictness: m,
     Unfolding: ((Main.tests44 `cast` (Sym (Defs.N:PName[0])),
                  Main.tests35 `cast` (Sym (Defs.N:Version[0])))) -}
5b08a0211ab2e8728ed3eb87818e7050
  tests44 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests45) -}
a40441979348ecb79e78ca4c90f7dfd4
  tests45 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("b"#) -}
0a538b08a5bcaab3be69f9411018f0c5
  tests46 ::
    GHC.Base.Maybe Defs.Sol
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <B,U><B,U>x -}
edb1a0c13b35d65e405a2eb1aaf1c742
  tests47 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Main.path
                   Main.tests48) -}
fb1ebc74eb925e5aaf3d358efddaf994
  tests48 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests49) -}
874660cf621414a5a307365a374f250a
  tests49 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test13"#) -}
8359150d73827e7f76705f57c7b563ee
  tests5 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests131
                   Main.tests6) -}
34d08efa7f6d4794498bc1d494446f59
  tests50 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests51) -}
2e859d7acac81c3947f045b49d707b94
  tests51 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("large case2"#) -}
00c3742f7d59c45901f49fb9bbdf9416
  tests52 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.tests104
                   Main.tests53
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <[GHC.Types.Char]>_R) ; Sym (Test.Tasty.HUnit.N:TestCase[0]))) -}
88b3135faa8eec5c7270e6d88a2fdb5d
  tests53 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests101
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds { (#,#) ipv2 ipv3 ->
                 case Text.Read.readEither8
                        @ Defs.Database
                        (Text.ParserCombinators.ReadP.run
                           @ Defs.Database
                           Main.tests100
                           ipv3) of wild {
                   []
                   -> case Main.tests99
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                      of {}
                   : x ds2
                   -> case ds2 of wild1 {
                        []
                        -> let {
                             $j :: Defs.Database
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                               <join 1> {- Arity: 1, Strictness: <S,U> -}
                             = \ (ndb :: Defs.Database)[OneShot] ->
                               case SolverImpl.install
                                      ndb
                                      Main.tests69 `cast` (Sym (Defs.N:PName[0])) of wild2 {
                                 GHC.Base.Nothing
                                 -> case Main.tests98
                                           (GHC.Base.Nothing @ [(Defs.PName, Defs.Version)])
                                           ipv2
                                    ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                              [GHC.Types.Char] #)
                                    of {}
                                 GHC.Base.Just a1
                                 -> case GHC.Classes.$fEq[]_$c==
                                           @ (Defs.PName, Defs.Version)
                                           Main.$s$fEq(,)
                                           a1
                                           Main.tests57 of wild3 {
                                      GHC.Types.False
                                      -> case Main.tests98 wild2 ipv2
                                         ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                   [GHC.Types.Char] #)
                                         of {}
                                      GHC.Types.True
                                      -> (# ipv2, GHC.Types.[] @ GHC.Types.Char #) } }
                           } in
                           case x `cast` (Defs.N:Database[0]) of wild2 {
                             []
                             -> $j (GHC.Types.[] @ Defs.Pkg) `cast` (Sym (Defs.N:Database[0]))
                             : ipv4 ipv5
                             -> case SolverImpl.isConsistentDB
                                       (Data.OldList.sortBy @ Defs.Pkg SolverImpl.pkgCompare wild2)
                                         `cast`
                                       (Sym (Defs.N:Database[0])) of wild3 {
                                  Data.Either.Left ipv6
                                  -> case (GHC.Magic.noinline
                                             @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                                             GHC.IO.failIO1
                                               `cast`
                                             (forall (a :: <*>_N).
                                              <GHC.Base.String>_R
                                              ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                                             @ ()
                                             Main.tests55)
                                            `cast`
                                          (GHC.Types.N:IO[0] <()>_R)
                                            ipv2 of ds3 { (#,#) ipv7 ipv8 ->
                                     (# ipv7, GHC.Types.[] @ GHC.Types.Char #) }
                                  Data.Either.Right ndb -> $j ndb } }
                        : ipv4 ipv5
                        -> case Main.tests54
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                           of {} } } } }) -}
fca2767c034f4ad186ea0e1fa1ec9147
  tests54 :: Defs.Database
  {- Strictness: x -}
eed1cb44b39ef12d5c4f68798c3d9a0c
  tests55 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests56) -}
b2a8cb1ee647f717ddad5cbc5971fe83
  tests56 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (".."#) -}
c338772065cc5feb84036d6c9e89bf7a
  tests57 :: [(Defs.PName, Defs.Version)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, Defs.Version)
                   Main.tests93
                   Main.tests58) -}
02c2c6017c11b6eb9a5741df4208d9ca
  tests58 :: [(Defs.PName, Defs.Version)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, Defs.Version)
                   Main.tests81
                   Main.tests59) -}
4fb06ceb1a5a510b54ac958f9be824fc
  tests59 :: [(Defs.PName, Defs.Version)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, Defs.Version)
                   Main.tests71
                   Main.tests60) -}
7664005d2c9b3fbf63ae0db639328a3f
  tests6 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests119
                   Main.tests7) -}
8c0a36bd830c3dcf64a0800944b96930
  tests60 :: [(Defs.PName, Defs.Version)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Defs.PName, Defs.Version)
                   Main.tests61
                   (GHC.Types.[] @ (Defs.PName, Defs.Version))) -}
f9efb5ca7c888673ba8812672704680f
  tests61 :: (Defs.PName, Defs.Version)
  {- Strictness: m,
     Unfolding: ((Main.tests69 `cast` (Sym (Defs.N:PName[0])),
                  Main.tests62 `cast` (Sym (Defs.N:Version[0])))) -}
5eef50d960c7496aaa3bac334ce71099
  tests62 :: [Defs.VNum]
  {- Strictness: m2,
     Unfolding: (GHC.Types.: @ Defs.VNum Main.tests67 Main.tests63) -}
eb0735a398466b4257fa7670d931fa21
  tests63 :: [Defs.VNum]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   Main.tests64
                   (GHC.Types.[] @ Defs.VNum)) -}
c2be6dc8b5c0c25126cca435e757e2dc
  tests64 :: Defs.VNum
  {- Strictness: m, Unfolding: (Defs.VN Main.tests31 Main.tests65) -}
c2f2b2987d38b831b888f6bd925756b8
  tests65 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests66) -}
8c6f994f798cc506f00bd2ae58946623
  tests66 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("aa"#) -}
d3741f7d41d13050ad5cd8cd3e736d2a
  tests67 :: Defs.VNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Defs.VN
                   Main.tests68
                   (GHC.Types.[] @ GHC.Types.Char)) -}
37da6a34e453afbcaa62154ecf887bee
  tests68 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
21afde6d3da71ab8b609a6e2288934cd
  tests69 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests70) -}
2fa0ee81fc89270a7ba4de9bb366156e
  tests7 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests106
                   Main.tests8) -}
8b3b69dcf2514effb422becda6da6d30
  tests70 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("chrome"#) -}
000d13605672af1a5311a00c185b2c6f
  tests71 :: (Defs.PName, Defs.Version)
  {- Strictness: m,
     Unfolding: ((Main.tests79 `cast` (Sym (Defs.N:PName[0])),
                  Main.tests72 `cast` (Sym (Defs.N:Version[0])))) -}
5f9506d6ccb0598554c1ba4eedd6b5e4
  tests72 :: [Defs.VNum]
  {- Strictness: m2,
     Unfolding: (GHC.Types.: @ Defs.VNum Main.tests76 Main.tests73) -}
9e7e2e986928bce358f45310c1329857
  tests73 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   Main.tests74
                   (GHC.Types.[] @ Defs.VNum)) -}
51b43fd9e61d8400dac921b137889462
  tests74 :: Defs.VNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Defs.VN
                   Main.tests75
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1b0d661be4b4065704c515aa6085e416
  tests75 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 32#) -}
c5b6f7d9171b8bbd363046818a500d0b
  tests76 :: Defs.VNum
  {- Strictness: m, Unfolding: (Defs.VN Main.tests37 Main.tests77) -}
38d07804710ed749c84e585a372a87d4
  tests77 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests78) -}
d2e19da9d06c1b944f4f976ce0fa7d96
  tests78 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ff"#) -}
e64884851bdbba4f6820d7abd2fa9658
  tests79 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests80) -}
30c640bb530d379a9c4b58baa60be27f
  tests8 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests52
                   Main.tests9) -}
1d379eedfd3aa8ae75dfb991778bc372
  tests80 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("bar"#) -}
234d720e5122f269b8c74d387081e855
  tests81 :: (Defs.PName, Defs.Version)
  {- Strictness: m,
     Unfolding: ((Main.tests91 `cast` (Sym (Defs.N:PName[0])),
                  Main.tests82 `cast` (Sym (Defs.N:Version[0])))) -}
d3ec258849bcdd75dac6443cf1b8c045
  tests82 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.: @ Defs.VNum Main.tests89 Main.tests83) -}
51e9c355b0925a2b5f9f4483d52401cb
  tests83 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.: @ Defs.VNum Main.tests87 Main.tests84) -}
3577f2b3f60a249809b8ae87dce04e52
  tests84 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   Main.tests85
                   (GHC.Types.[] @ Defs.VNum)) -}
529251f2b805944f6e2e4be0b0f8419a
  tests85 :: Defs.VNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Defs.VN
                   Main.tests86
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c9db2a3dbd15685b67129c59d942be5c
  tests86 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
813d0e4e0b44c4f008c6b17113f7bbfd
  tests87 :: Defs.VNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Defs.VN
                   Main.tests88
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a8c57195469e6533971f8845d8a3dd2e
  tests88 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
764ec471d935a463fdca192575ee706c
  tests89 :: Defs.VNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Defs.VN
                   Main.tests90
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d8ee4a5f55bfdf9cf548c8e2385dd106
  tests9 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests21
                   Main.tests10) -}
f513cd03f037f8e77f3b58d237c14d7e
  tests90 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 6#) -}
6e8b41e46ed21684cfae341cb53ef6f2
  tests91 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests92) -}
48f9dcd518bbb007860457f760b3802a
  tests92 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("baz"#) -}
97caf3efbbcc8bdd7ef40f88f6b44262
  tests93 :: (Defs.PName, Defs.Version)
  {- Strictness: m,
     Unfolding: ((Main.tests96 `cast` (Sym (Defs.N:PName[0])),
                  Main.tests94 `cast` (Sym (Defs.N:Version[0])))) -}
760ab00d6d84e6b54a3cc6c891c1b586
  tests94 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.: @ Defs.VNum Main.tests85 Main.tests95) -}
beee93cd3e2af629add46a898fcf95a4
  tests95 :: [Defs.VNum]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Defs.VNum
                   Main.tests67
                   (GHC.Types.[] @ Defs.VNum)) -}
03a56c6d855bc173017428df1eed064d
  tests96 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.tests97) -}
c2ee2b0804b18f96df77f8fd5533ad76
  tests97 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("foo"#) -}
6d5089d5b87788aa8d2a863b320983a9
  tests98 ::
    GHC.Base.Maybe Defs.Sol
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <B,U><B,U>x -}
519d9049ae87f9b2aa798558dc656ba6
  tests99 :: Defs.Database
  {- Strictness: x -}
d2f58d5f830d861f1169f4114e0b49fd
  tests_eta :: GHC.Base.Maybe Defs.Sol
  {- Unfolding: (SolverImpl.install
                   Main.tests136 `cast` (Sym (Defs.N:Database[0]))
                   Main.tests96 `cast` (Sym (Defs.N:PName[0]))) -}
e9c5a96afef4a06019b0fa9e9c94e7bb
  tests_eta1 :: Data.Either.Either Defs.ErrMsg Defs.Database
  {- Unfolding: (case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Char
                         @ ()
                         @ Defs.Database
                         (ParserImpl.$s$fStream[]mtok @ GHC.Types.Char)
                         ParserImpl.databaseParser1
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <[GHC.Types.Char]>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <Defs.Database>_R))
                         GHC.Tuple.()
                         (GHC.Types.[] @ GHC.Types.Char)
                         Main.tests241)
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError Defs.Database>_R) of wild {
                   Data.Either.Left err
                   -> Data.Either.Left
                        @ GHC.Base.String
                        @ Defs.Database
                        (Text.Parsec.Error.$fShowParseError_$cshow err)
                   Data.Either.Right db
                   -> Data.Either.Right @ Defs.ErrMsg @ Defs.Database db }) -}
c913947eeef1b7b64c8d36cffa719645
  tests_eta2 :: GHC.Base.Maybe Defs.Constrs
  {- Unfolding: (Utils.merge_go Main.tests263 Main.tests255) -}
0edab72983ab5599d7d6535c10db7742
  tests_eta3 :: GHC.Base.Maybe Defs.Constrs
  {- Unfolding: (Utils.merge_go Main.tests274 Main.tests269) -}
86d60034b1ca703362f94b419caa67e0
  tests_eta4 :: GHC.Base.Maybe Defs.Constrs
  {- Unfolding: (Utils.merge_go Main.tests288 Main.tests285) -}
bfb6c1b88f04cdf188b95a4adf1fd04f
  tests_eta5 :: GHC.Base.Maybe Defs.Constrs
  {- Unfolding: (Utils.merge_go Main.tests310 Main.tests307) -}
bbafab25f4851ef5341aa0a1eb52a0e3
  tests_eta6 :: GHC.Base.Maybe Defs.Constrs
  {- Unfolding: (Utils.merge_go Main.tests318 Main.tests316) -}
85ff6b9681585cf8ba75ee676f64a6fe
  tests_eta7 :: GHC.Base.Maybe Defs.Constrs
  {- Unfolding: (Utils.merge_go Main.tests349 Main.tests344) -}
"SPEC/Main $fEq(,) @ PName @ Version" [orphan] forall (v1 :: GHC.Classes.Eq
                                                               Defs.Version)
                                                      (v :: GHC.Classes.Eq Defs.PName)
  GHC.Classes.$fEq(,) @ Defs.PName @ Defs.Version v v1
  = Main.$s$fEq(,)
"SPEC/Main $fEq(,)_$c/= @ PName @ Version" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                       Defs.Version)
                                                           ($dEq :: GHC.Classes.Eq Defs.PName)
  GHC.Classes.$fEq(,)_$c/= @ Defs.PName @ Defs.Version $dEq $dEq1
  = Main.$s$fEq(,)_$s$fEq(,)_$c/=
"SPEC/Main $fShow(,,) @ Bool @ Version @ Version" [orphan] forall (v2 :: GHC.Show.Show
                                                                           Defs.Version)
                                                                  (v1 :: GHC.Show.Show Defs.Version)
                                                                  (v :: GHC.Show.Show
                                                                          GHC.Types.Bool)
  GHC.Show.$fShow(,,) @ GHC.Types.Bool
                      @ Defs.Version
                      @ Defs.Version
                      v
                      v1
                      v2
  = Main.$s$fShow(,)_$s$fShow(,,)
"SPEC/Main $fShowEither @ [Char] @ Database" [orphan] forall (v1 :: GHC.Show.Show
                                                                      Defs.Database)
                                                             (v :: GHC.Show.Show [GHC.Types.Char])
  Data.Either.$fShowEither @ [GHC.Types.Char] @ Defs.Database v v1
  = Main.$s$fShowEither
"SPEC/Main $fShowEither_$cshowList @ [Char] @ Database" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                      Defs.Database)
                                                                        ($dShow :: GHC.Show.Show
                                                                                     [GHC.Types.Char])
  Data.Either.$fShowEither_$cshowList @ [GHC.Types.Char]
                                      @ Defs.Database
                                      $dShow
                                      $dShow1
  = Main.$s$fShowEither_$cshowList
"SPEC/Main $fShowEither_$cshowsPrec @ [Char] @ Database" [orphan] [0] forall (w1 :: GHC.Show.Show
                                                                                      Defs.Database)
                                                                             (w :: GHC.Show.Show
                                                                                     [GHC.Types.Char])
  Data.Either.$fShowEither_$cshowsPrec @ [GHC.Types.Char]
                                       @ Defs.Database
                                       w
                                       w1
  = Main.$s$fShowEither_$cshowsPrec
"SPEC/Main $fShowMaybe @ [(PName, PConstr)]" [orphan] forall (v :: GHC.Show.Show
                                                                     [(Defs.PName, Defs.PConstr)])
  GHC.Show.$fShowMaybe @ [(Defs.PName, Defs.PConstr)] v
  = Main.$s$fShowMaybe1
"SPEC/Main $fShowMaybe @ [(PName, Version)]" [orphan] forall (v :: GHC.Show.Show
                                                                     [(Defs.PName, Defs.Version)])
  GHC.Show.$fShowMaybe @ [(Defs.PName, Defs.Version)] v
  = Main.$s$fShowMaybe
"SPEC/Main $fShowMaybe_$cshowList @ [(PName, PConstr)]" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                     [(Defs.PName,
                                                                                       Defs.PConstr)])
  GHC.Show.$fShowMaybe_$cshowList @ [(Defs.PName, Defs.PConstr)]
                                  $dShow
  = Main.$s$fShowMaybe_$cshowList1
"SPEC/Main $fShow[] @ (PName, PConstr)" [orphan] forall (v :: GHC.Show.Show
                                                                (Defs.PName, Defs.PConstr))
  GHC.Show.$fShow[] @ (Defs.PName, Defs.PConstr) v
  = Main.$s$fShowMaybe_$s$fShow[]1
"SPEC/Main $fShow[] @ (PName, Version)" [orphan] forall (v :: GHC.Show.Show
                                                                (Defs.PName, Defs.Version))
  GHC.Show.$fShow[] @ (Defs.PName, Defs.Version) v
  = Main.$s$fShowMaybe_$s$fShow[]
"SPEC/Main $fShow[]_$cshow @ (PName, PConstr)" [orphan] forall ($dShow :: GHC.Show.Show
                                                                            (Defs.PName,
                                                                             Defs.PConstr))
  GHC.Show.$fShow[]_$cshow @ (Defs.PName, Defs.PConstr) $dShow
  = Main.$s$fShow[]_$cshow1
"SPEC/Main $fShow[]_$cshowList @ (PName, PConstr)" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                (Defs.PName,
                                                                                 Defs.PConstr))
  GHC.Show.$fShow[]_$cshowList @ (Defs.PName, Defs.PConstr) $dShow
  = Main.$s$fShow[]_$cshowList1
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

